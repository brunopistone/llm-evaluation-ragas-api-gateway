"question","ground_truth_context","ground_truth","question_type","episode_done"
"Wht docs r pdng fr clm acrdng t ctxt1 & stts f clm n ctxt2?","['Here are the relevant sentences from the given contexts that can potentially help answer the question:\\n\\n1. ""List of documents that are pending to be uploaded by policy holder for insurance claim""\\n\\n2. ""The list of pending documents for the claim."" \\n\\n3. ""The status of the claim. Claim can be in Open or Closed state""']","['Based on the contexts provided:\\n\\nThe question is asking ""What documents are pending for claim according to context1 & status of claim in context2?"".\\n\\nContext1 provides the information that documents are pending to be uploaded by the policy holder for the insurance claim. \\n\\nContext2 mentions the list of pending documents for the claim and also provides the status of the claim as either Open or Closed.\\n\\nTherefore, the documents that are pending for the claim according to context1 & status of claim in context2 are ""the list of documents that are pending to be uploaded by the policy holder for the insurance claim"" and this list will be available only when the status of the claim is Open.']","multi_context","True"
"Here is an indirectly rewritten shorter question retaining the essence of the original:","['Here are two relevant sentences from the provided context:\\n\\nCustomers can privately customize FMs with their own data through a visual interface without writing any code. Simply select the training and validation data sets stored in Amazon Simple Storage Service (Amazon S3) and, if required, adjust the hyperparameters to achieve the best possible model performance.\\n\\nWith Knowledge Bases for Amazon Bedrock, you can securely connect FMs to your data sources for retrieval augmentation—from within the managed service—extending the FM’s already powerful capabilities and making it more knowledgeable about your specific domain and organization.']","[""Here is an answer to the indirectly rewritten shorter question based on the provided context:\\n\\nCustomers can connect their Amazon Fraud Detector models to additional data sources for retrieval augmentation in order to make the models more knowledgeable about their specific domain and organization. According to the context, Amazon Fraud Detector models (FMs) can be securely connected to customers' data sources through Knowledge Bases for Amazon Bedrock, which extends the already powerful capabilities of the FMs. This allows the FMs to retrieve additional domain-specific data from the customers' organization, augmenting the knowledge of the FMs.""]","multi_context","False"
"","['Here are the relevant sentences from the context:\\n\\nAmazon Bedrock offers an easy-to-use developer experience to work with a broad range of high-performing FMs from leading AI companies like AI21 Labs, Anthropic, Cohere, Meta, Stability AI, and Amazon. You can quickly experiment with a variety of FMs in the playground, and use a single API for inference regardless of the models you choose, giving you the flexibility to use FMs from different providers and keep up to date with the latest model versions with minimal code changes.\\n\\nPrivately customize FMs with your own data through a visual interface without writing any code. Simply select the training and validation data sets stored in Amazon Simple Storage Service (Amazon S3) and, if required, adjust the hyperparameters to achieve the best possible model performance.\\n\\nBuild agents that execute complex business tasks—from booking travel and processing insurance claims to creating ad campaigns, preparing tax filings, and managing your inventory—by dynamically calling your company systems and APIs. Fully managed agents for Amazon Bedrock extend the reasoning capabilities of FMs to break down tasks, create an orchestration plan, and execute it.\\n\\nWith Knowledge Bases for Amazon Bedrock, you can securely connect']","['Based on the context provided, Amazon Bedrock allows you to:\\n\\n- Quickly experiment with a variety of FMs (language models) from different providers like AI21 Labs, Anthropic, Cohere, Meta, Stability AI, and Amazon through a single API for inference. This gives flexibility to use models from different providers and keep them updated with minimal code changes.\\n\\n- Privately customize FMs with your own data through a visual interface without writing any code. You can select training and validation data from Amazon S3 and adjust hyperparameters. \\n\\n- Build agents that can execute complex business tasks like booking travel, processing insurance claims etc. by dynamically calling your company systems and APIs. These fully managed agents extend the reasoning capabilities of FMs.\\n\\n- Securely connect knowledge bases to FMs to add structured data to power more contextual conversations.']","multi_context","True"
"Wht is th mnpurp of Amzn Bdrck n hlpng cust strmln ops by bldng IA tht lvrg Fndtn Mdls?","['Here are the relevant sentences from the provided context that could potentially help answer the question:\\n\\nAmazon Bedrock offers an easy-to-use developer experience to work with a broad range of high-performing FMs from leading AI companies like AI21 Labs, Anthropic, Cohere, Meta, Stability AI, and Amazon. You can quickly experiment with a variety of FMs in the playground, and use a single API for inference regardless of the models you choose, giving you the flexibility to use FMs from different providers and keep up to date with the latest model versions with minimal code changes.\\n\\nBuild agents that execute complex business tasks—from booking travel and processing insurance claims to creating ad campaigns, preparing tax filings, and managing your inventory—by dynamically calling your company systems and APIs. Fully managed agents for Amazon Bedrock extend the reasoning capabilities of FMs to break down tasks, create an orchestration plan, and execute it.']","['Based on the context provided, the main purpose of Amazon Bedrock in helping customers streamline operations by building AI that leverages Foundation Models is to:\\n\\nAllow customers to easily build intelligent agents that can execute complex business tasks by dynamically calling their company systems and APIs. These agents extend the reasoning capabilities of Foundation Models to break down tasks, create an orchestration plan to complete them, and then execute that plan. This helps customers streamline and automate various operations with minimal code changes needed as new Foundation Models are released.']","multi_context","True"
"Wht AWS Lmbda fnctn implmnts API cals dfnd in ClmMngmntActnGrp bsdn bsns lgc cptrd in InsClmsLmbda fnctn?","['The following sentences from the given context are relevant to answering the question:\\n\\nFor example, let’s define an action group called ClaimManagementActionGroup that manages insurance claims by pulling a list of open claims, identifying outstanding paperwork for each claim, and sending reminders to policy holders. Make sure to capture this information in the action group description. The business logic for my action group is captured in the Lambda function InsuranceClaimsLambda. This AWS Lambda function implements methods for the following API calls: open-claims, identify-missing-documents, and send-reminders.']","['The AWS Lambda function that implements the API calls defined in ClaimManagementActionGrp based on business logic captured in InsClmsLmbda function is InsuranceClaimsLambda.\\n\\nThe context mentions that the business logic for ClaimManagementActionGroup is captured in the Lambda function InsuranceClaimsLambda. It also states that InsuranceClaimsLambda implements methods for the API calls open-claims, identify-missing-documents, and send-reminders, which are the API calls defined for ClaimManagementActionGroup.']","multi_context","True"
"What foundation models are available in Amazon Bedrock?","['Here are the relevant sentences from the context:\\n\\nAmazon Bedrock offers an easy-to-use developer experience to work with a broad range of high-performing FMs from leading AI companies like AI21 Labs, Anthropic, Cohere, Meta, Stability AI, and Amazon. \\n\\nAmazon Bedrock offers an easy-to-use developer experience to work with a broad range of high-performing FMs from Amazon and leading AI companies like AI21 Labs, Anthropic, Cohere, Meta, and Stability AI.']","['Based on the context provided, the foundation models available in Amazon Bedrock are:\\n\\n- FMs from AI21 Labs\\n- FMs from Anthropic  \\n- FMs from Cohere\\n- FMs from Meta\\n- FMs from Stability AI\\n- FMs from Amazon\\n\\nSo in summary, Amazon Bedrock offers foundation models from Amazon and several leading AI safety companies like AI21 Labs, Anthropic, Cohere, Meta, and Stability AI.']","simple","True"
"Here is an indirectly rewritten shorter version of the question within 25 words:","['Here are two relevant sentences from the given context that could potentially help answer the question ""What is the purpose of the API to send reminder?"":\\n\\n""Send reminder to the customer about pending documents for open claim.""\\n\\n""API to send reminder to the customer about pending documents for open claim""']","['Purpose send reminder documents claim']","conditional","False"
"","['Here are the relevant sentences from the context:\\n\\n1. ""Send reminder to the customer about pending documents for open claim. The API takes in only one claim id and its pending documents at a time, sends the reminder and returns the tracking details for the reminder. This API should be called for each claim id you want to send reminders for.""\\n\\n2. ""Unique ID of open claims to send reminders for."" \\n\\n3. ""The list of pending documents for the claim.""']","['Based on the context given, the question being asked is:\\n\\nWhat are the parameters required to call the API that sends reminders for pending documents of open claims?\\n\\nThe relevant sentences from the context are:\\n\\n1) This API takes in only one claim id and its pending documents at a time. \\n\\n2) Unique ID of open claims to send reminders for.\\n\\n3) The list of pending documents for the claim.\\n\\nPutting this together, the parameters required to call the API are:\\n\\n1. Claim ID \\n2. List of pending documents for the claim\\n\\nSo the API needs to be passed the Claim ID and the list of pending documents as parameters to send a reminder for a particular open claim.']","conditional","True"
"If docs pending after claim sent, does API track remind status?","['Here are the relevant sentences from the context:\\n\\n""Send reminder to the customer about pending documents for open claim. The API takes in only one claim id and its pending documents at a time, sends the reminder and returns the tracking details for the reminder.""\\n\\n""Reminders sent successfully"",\\n                        ""content"": {\\n                            ""application/json"": {\\n                                ""schema"": {\\n                                    ""type"": ""object"",\\n                                    ""properties"": {\\n                                        ""sendReminderTrackingId"": {\\n                                            ""type"": ""string"",\\n                                            ""description"": ""Unique Id to track the status of the send reminder Call""']","['Yes, the API does track the remind status. \\nThe context mentions that the API takes the claim ID and its pending documents, sends the reminder and returns the tracking details for the reminder. It also mentions there is a ""sendReminderTrackingId"" property in the response which is a unique ID to track the status of the send reminder call. So the API provides a way to track the remind status using this tracking ID that is returned when sending the reminder.']","conditional","True"
"Pls advise how ID policy holder from claim dets in API resp?","['Here are the relevant sentences from the given context without any changes:\\n\\n""claimId"": {\\n                                                ""type"": ""string"",\\n                                                ""description"": ""Unique ID of the claim.""\\n                                            },\\n                                            ""policyHolderId"": {\\n                                                ""type"": ""string"",\\n                                                ""description"": ""Unique ID of the policy holder who has filed the claim.""']","['To get the policy holder ID from the claim details API response, you need to look at the ""policyHolderId"" field. It will contain the unique ID of the policy holder who filed the claim.\\n\\nSo the steps would be:\\n\\n1. Make an API call to get the claim details \\n2. In the response, there will be a JSON object with various fields like ""claimId"", ""policyHolderId"" etc.  \\n3. The ""policyHolderId"" field will have the unique ID of the policy holder for that particular claim.']","reasoning","True"
"What is Amazon Bedrock?","['The following sentences from the given context are relevant to answering the question ""What is Amazon Bedrock?"":\\n\\nThis April, Swami Sivasubramanian, Vice President of Data and Machine Learning at AWS, announced Amazon Bedrock and Amazon Titan models as part of new tools for building with generative AI on AWS.']","['Based on the context given, Amazon Bedrock is a new tool announced by Amazon Web Services (AWS) in April for building with generative AI on AWS. It was announced by Swami Sivasubramanian, Vice President of Data and Machine Learning at AWS, along with Amazon Titan models. But the context does not provide any additional details about what Amazon Bedrock is or its specific capabilities.']","simple","True"
"Bsd on prvd ctxt, 1st stp b4 cr8ng agnt w/ Amzn Bdrck 2 autom8 tsks 4 ins co clnts?","['Based on the provided context, the first step before creating an agent with Amazon Bedrock 2 to automate tasks for ins co clnts is to give the agent access to external data sources and connect it to existing APIs of other applications.']","['The first step before creating an agent with Amazon Bedrock 2 to automate tasks for ins co clnts is to give the agent access to external data sources and connect it to existing APIs of other applications.']","reasoning","True"
"Here is an indirectly rewritten shorter version of the original question:","['Here are two relevant sentences from the context:\\n\\n""In the final step, review your agent configuration and choose Create Agent.""\\n\\n""Congratulations, you’ve just created your first agent in Amazon Bedrock!""']","['I do not have enough context to answer the question. The passage provided two sentences but did not include the actual question being asked. Can you please provide the full context and the exact question?']","reasoning","False"
"","['Here are the relevant sentences from the context that could potentially help answer the question:\\n\\n""When a user asks your agent to complete a task, Bedrock will use the FM you configured for the agent to identify the sequence of actions and invoke the corresponding Lambda functions in the right order to solve the user-requested task.""\\n\\n""Now, let’s test the insurance agent! You can do this right in the Bedrock console. Let’s ask the agent to “Send reminder to all policy holders with open claims and pending paper work.” You can see how the FM-powered agent is able to understand the user request, break down the task into steps (collect the open insurance claims, lookup the claim IDs, send reminders), and perform the corresponding actions.""']","['Based on the context provided, the sequence of actions that the agent would take to complete the task of ""Send reminder to all policy holders with open claims and pending paper work"" are:\\n\\n1. Collect the open insurance claims \\n2. Lookup the claim IDs of the open insurance claims\\n3. Send reminders to the policy holders associated with the claim IDs\\n\\nThe context mentions that Bedrock uses the configured FM (formal methods/models) to identify the sequence of actions needed to solve a user-requested task. It then gives the example of asking the insurance agent to ""Send reminder to all policy holders with open claims and pending paper work"". It describes how the agent is able to break down this task into steps: 1) collect open claims, 2) lookup claim IDs, 3) send reminders. So based on this context, these three steps would be the sequence of actions the agent takes to complete the given task.']","reasoning","True"
"Steps test ins agent creat using Amzn Bedrock if alias ""TestAgent"" v1 deploy?","['Here are the relevant sentences from the given context:\\n\\nDeploy an Agent for Amazon Bedrock To deploy an agent in your application, you must create an alias. Bedrock then automatically creates a version for that alias.\\n\\nIn the Bedrock console, select your agent, then select Deploy, and choose Create to create an alias. Provide an alias name and description and choose whether to create a new version or use an existing version of your agent to associate with this alias. This saves a snapshot of the agent code and configuration and associates an alias with this snapshot or version. You can use the alias to integrate the agent into your applications.']","['Yes, the steps to deploy an agent for Amazon Bedrock using the alias ""TestAgent"" for version 1 are:\\n\\n1. In the Bedrock console, select the agent \\n2. Select Deploy\\n3. Choose Create to create an alias\\n4. Provide the alias name ""TestAgent"" and a description\\n5. Choose to use an existing version 1 of the agent to associate with this alias\\n\\nThis will save a snapshot of the agent code and configuration and associate the alias ""TestAgent"" with version 1 of the agent. Then you can use the ""TestAgent"" alias to integrate the agent into your applications.']","reasoning","True"
